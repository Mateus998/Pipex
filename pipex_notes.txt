Guia Detalhado para Execução do Projeto Pipex
1. Entenda o Problema
Você deve replicar o comportamento de comandos encadeados por pipes em shell, por exemplo:
ls -l | grep txt > out.txt
No Pipex, você geralmente recebe: arquivo de entrada, dois comandos, arquivo de saída.
2. Parse os Argumentos
Analise os argumentos passados na linha de comando.
Separe cada comando e seus argumentos.
Identifique os arquivos de entrada e saída.
3. Crie o Pipe
Use pipe() para criar um canal de comunicação entre os processos.
4. Faça o Fork
Use fork() para criar processos filhos para cada comando.
O pai deve controlar a execução geral.
5. Redirecione Entrada/Saída
No filho do primeiro comando:
Redirecione a entrada padrão do arquivo de entrada (use dup2).
Redirecione a saída padrão para o lado de escrita do pipe.
No filho do segundo comando:
Redirecione a entrada padrão para o lado de leitura do pipe.
Redirecione a saída padrão para o arquivo de saída.
6. Feche Descritores Não Usados
Após duplicar descritores, feche os originais para evitar vazamentos.
7. Use execve para Executar os Comandos
Depois de redirecionar os descritores, use execve para executar cada comando.
Se falhar, trate o erro adequadamente.
8. O Pai Espera os Filhos
O processo pai deve usar wait ou waitpid para aguardar a finalização dos filhos.
9. Tratamento de Erros
Verifique o retorno de todas as funções do sistema.
Trate erros de arquivos, pipes, forks, execve, etc.
10. Atenção ao PATH
Para encontrar o executável do comando, busque nas pastas do PATH usando access.
11. Limpeza
Use unlink para apagar arquivos temporários, se necessário.
12. Gerenciamento de Memória
Lembre-se de liberar tudo que você alocar dinamicamente.
Resumindo as Etapas
Parse os argumentos e comandos.
Crie um pipe.
Faça fork para criar processos filhos.
Redirecione a entrada/saída dos processos filhos conforme necessário.
Execute os comandos com execve.
Feche descritores desnecessários.
O pai espera os filhos terminarem.
Trate erros e faça a limpeza final.